// Code generated by MockGen. DO NOT EDIT.
// Source: ./redis/redis.go

// Package mock_redis is a generated GoMock package.
package mock_redis

import (
	context "context"
	reflect "reflect"
	time "time"

	redislock "github.com/bsm/redislock"
	gomock "github.com/golang/mock/gomock"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// Del mocks base method.
func (m *MockInterface) Del(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Del", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Del indicates an expected call of Del.
func (mr *MockInterfaceMockRecorder) Del(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*MockInterface)(nil).Del), ctx, key)
}

// FlushAll mocks base method.
func (m *MockInterface) FlushAll(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlushAll", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// FlushAll indicates an expected call of FlushAll.
func (mr *MockInterfaceMockRecorder) FlushAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlushAll", reflect.TypeOf((*MockInterface)(nil).FlushAll), ctx)
}

// FlushAllAsync mocks base method.
func (m *MockInterface) FlushAllAsync(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlushAllAsync", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// FlushAllAsync indicates an expected call of FlushAllAsync.
func (mr *MockInterfaceMockRecorder) FlushAllAsync(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlushAllAsync", reflect.TypeOf((*MockInterface)(nil).FlushAllAsync), ctx)
}

// FlushDB mocks base method.
func (m *MockInterface) FlushDB(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlushDB", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// FlushDB indicates an expected call of FlushDB.
func (mr *MockInterfaceMockRecorder) FlushDB(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlushDB", reflect.TypeOf((*MockInterface)(nil).FlushDB), ctx)
}

// FlushDBAsync mocks base method.
func (m *MockInterface) FlushDBAsync(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlushDBAsync", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// FlushDBAsync indicates an expected call of FlushDBAsync.
func (mr *MockInterfaceMockRecorder) FlushDBAsync(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlushDBAsync", reflect.TypeOf((*MockInterface)(nil).FlushDBAsync), ctx)
}

// Get mocks base method.
func (m *MockInterface) Get(ctx context.Context, key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockInterfaceMockRecorder) Get(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockInterface)(nil).Get), ctx, key)
}

// Lock mocks base method.
func (m *MockInterface) Lock(ctx context.Context, key string, expTime time.Duration) (*redislock.Lock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lock", ctx, key, expTime)
	ret0, _ := ret[0].(*redislock.Lock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Lock indicates an expected call of Lock.
func (mr *MockInterfaceMockRecorder) Lock(ctx, key, expTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lock", reflect.TypeOf((*MockInterface)(nil).Lock), ctx, key, expTime)
}

// LockRelease mocks base method.
func (m *MockInterface) LockRelease(ctx context.Context, lock *redislock.Lock) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LockRelease", ctx, lock)
	ret0, _ := ret[0].(error)
	return ret0
}

// LockRelease indicates an expected call of LockRelease.
func (mr *MockInterfaceMockRecorder) LockRelease(ctx, lock interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockRelease", reflect.TypeOf((*MockInterface)(nil).LockRelease), ctx, lock)
}

// SetEX mocks base method.
func (m *MockInterface) SetEX(ctx context.Context, key, val string, expTime time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetEX", ctx, key, val, expTime)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetEX indicates an expected call of SetEX.
func (mr *MockInterfaceMockRecorder) SetEX(ctx, key, val, expTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEX", reflect.TypeOf((*MockInterface)(nil).SetEX), ctx, key, val, expTime)
}
