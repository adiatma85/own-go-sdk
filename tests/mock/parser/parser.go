// Code generated by MockGen. DO NOT EDIT.
// Source: ./parser/parser.go
//
// Generated by this command:
//
//	mockgen -source ./parser/parser.go -destination ./tests/mock/parser/parser.go
//

// Package mock_parser is a generated GoMock package.
package mock_parser

import (
	reflect "reflect"

	parser "github.com/adiatma85/own-go-sdk/parser"
	gomock "go.uber.org/mock/gomock"
)

// MockParser is a mock of Parser interface.
type MockParser struct {
	ctrl     *gomock.Controller
	recorder *MockParserMockRecorder
}

// MockParserMockRecorder is the mock recorder for MockParser.
type MockParserMockRecorder struct {
	mock *MockParser
}

// NewMockParser creates a new mock instance.
func NewMockParser(ctrl *gomock.Controller) *MockParser {
	mock := &MockParser{ctrl: ctrl}
	mock.recorder = &MockParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockParser) EXPECT() *MockParserMockRecorder {
	return m.recorder
}

// JSONParser mocks base method.
func (m *MockParser) JSONParser() parser.JSONInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JSONParser")
	ret0, _ := ret[0].(parser.JSONInterface)
	return ret0
}

// JSONParser indicates an expected call of JSONParser.
func (mr *MockParserMockRecorder) JSONParser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSONParser", reflect.TypeOf((*MockParser)(nil).JSONParser))
}
